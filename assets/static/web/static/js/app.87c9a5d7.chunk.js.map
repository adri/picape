{"version":3,"sources":["constants/Colors.js","components/TabBarIcon.js","components/Card/ImageCard.js","components/Icon/CheckIcon.js","components/Icon/PlusIcon.js","components/Icon/MinusIcon.js","components/Section/SectionHeader.js","components/ListItem/ListItem.js","components/Badge/Badge.js","components/Ingredient/QuantitySelector.js","screens/PlanScreen.js","screens/ShopScreen.js","screens/CookScreen.js","navigation/BottomTabNavigator.js","screens/RecipeDetailScreen.js","App.js","navigation/useLinking.js","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["palette","tintColor","tabIconDefault","tabIconSelected","tabBar","errorBackground","errorText","warningBackground","warningText","noticeBackground","noticeText","checkboxSelected","secondaryText","navButtonText","navButtonBackground","navButtonSelectedBackground","navButtonSelectedText","badgeBackground","badgeText","cardBackground","cardHighlightBackground","iconDefault","iconSelected","TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","ImageCard","View","borderColor","paddingHorizontal","TouchableOpacity","onPress","flex","ImageBackground","source","uri","imageUrl","imageStyle","borderRadius","resizeMode","flexDirection","width","height","children","paddingTop","Text","title","CheckIcon","backgroundColor","margin","marginTop","PlusIcon","MinusIcon","SectionHeader","justifyContent","alignItems","marginHorizontal","borderTopColor","borderTopWidth","fontSize","fontWeight","paddingBottom","ListItem","paddingVertical","Image","fadeDuration","marginLeft","alignSelf","Badge","amount","enhance","compose","withState","withHandlers","toggle","timeout","clearTimeout","resetCloseTimout","opened","setTimeout","lifecycle","componentWillUnmount","this","ORDER_INGREDIENT","gql","QuantitySelector","id","orderedQuantity","useMutation","refetchQueries","onCompleted","orderIngredient","e","preventDefault","variables","ingredientId","quantity","alignContent","marginRight","PLAN_RECIPE","UNPLAN_RECIPE","GET_RECIPES","GET_BASICS","RecipeList","navigation","useQuery","loading","error","data","planRecipe","unplanRecipe","recipes","layout","containerStyle","isLoading","paddingLeft","horizontal","map","recipe","navigate","key","isPlanned","recipeId","BasicsList","basics","edges","Array","fill","FlatList","keyExtractor","ingredient","renderItem","item","PlanScreen","contentContainerStyle","navigationOptions","header","GET_ORDER","ShopScreen","inShoppingList","currentOrder","items","GET_LAST_RECIPES","CookScreen","flexBasis","flexWrap","BottomTab","createBottomTabNavigator","BottomTabNavigator","route","setOptions","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","component","options","tabBarIcon","GET_RECIPE","RecipeDetailScreen","params","returnPartialData","styles","container","StyleSheet","create","onErrorLink","onError","graphQLErrors","networkError","message","locations","path","console","log","Stack","createStackNavigator","link","ApolloLink","from","createAbsintheSocketLink","AbsintheSocket","PhoenixSocket","client","ApolloClient","cache","InMemoryCache","App","React","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","screens","plan","shop","cook","RecipeDetail","parse","decodeURIComponent","a","async","SplashScreen","preventAutoHide","Font","font","require","warn","hide","skipLoadingScreen","Platform","OS","StatusBar","barStyle","NavigationContainer","ref","initialState","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","module","exports"],"mappings":"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","file":"static/js/app.87c9a5d7.chunk.js","sourcesContent":["const tintColor = \"#48BB78\";\n\n// Palette 12\nconst palette = {\n  // Primary\n  // These are the splashes of color that should appear the most in your UI,\n  // and are the ones that determine the overall \"look\" of the site.\n  // Use these for things like primary actions, links, navigation items, icons,\n  // accent borders, or text you want to emphasize.\n  \"green-050\": \"#E3F9E5\",\n  \"green-100\": \"#C1EAC5\",\n  \"green-200\": \"#A3D9A5\",\n  \"green-300\": \"#7BC47F\",\n  \"green-400\": \"#57AE5B\",\n  \"green-500\": \"#3F9142\",\n  \"green-600\": \"#2F8132\",\n  \"green-700\": \"#207227\",\n  \"green-800\": \"#0E5814\",\n  \"green-900\": \"#05400A\",\n\n  // Neutrals\n  // These are the colors you will use the most and will make up the majority\n  // of your UI.Use them for most of your text, backgrounds, and borders, as\n  // well as for things like secondary buttons and links.\n  \"grey-050\": \"#F7F7F7\",\n  \"grey-100\": \"#E1E1E1\",\n  \"grey-200\": \"#CFCFCF\",\n  \"grey-300\": \"#B1B1B1\",\n  \"grey-400\": \"#9E9E9E\",\n  \"grey-500\": \"#7E7E7E\",\n  \"grey-600\": \"#626262\",\n  \"grey-700\": \"#515151\",\n  \"grey-800\": \"#3B3B3B\",\n  \"grey-900\": \"#222222\",\n\n  // Supporting\n  // These colors should be used fairly conservatively throughout your UI to\n  // avoid overpowering your primary colors. Use them when you need an element\n  // to stand out, or to reinforce things like error states or positive trends\n  // with the appropriate semantic color.\n  \"purple-050\": \"#EAE2F8\",\n  \"purple-100\": \"#CFBCF2\",\n  \"purple-200\": \"#A081D9\",\n  \"purple-300\": \"#8662C7\",\n  \"purple-400\": \"#724BB7\",\n  \"purple-500\": \"#653CAD\",\n  \"purple-600\": \"#51279B\",\n  \"purple-700\": \"#421987\",\n  \"purple-800\": \"#34126F\",\n  \"purple-900\": \"#240754\",\n\n  \"red-050\": \"#FFEEEE\",\n  \"red-100\": \"#FACDCD\",\n  \"red-200\": \"#F29B9B\",\n  \"red-300\": \"#E66A6A\",\n  \"red-400\": \"#D64545\",\n  \"red-500\": \"#BA2525\",\n  \"red-600\": \"#A61B1B\",\n  \"red-700\": \"#911111\",\n  \"red-800\": \"#780A0A\",\n  \"red-900\": \"#610404\",\n\n  \"yellow-050\": \"#FFFAEB\",\n  \"yellow-100\": \"#FCEFC7\",\n  \"yellow-200\": \"#F8E3A3\",\n  \"yellow-300\": \"#F9DA8B\",\n  \"yellow-400\": \"#F7D070\",\n  \"yellow-500\": \"#E9B949\",\n  \"yellow-600\": \"#C99A2E\",\n  \"yellow-700\": \"#A27C1A\",\n  \"yellow-800\": \"#7C5E10\",\n  \"yellow-900\": \"#513C06\",\n};\n\nexport default {\n  tintColor,\n  tabIconDefault: \"#ccc\",\n  tabIconSelected: tintColor,\n  tabBar: \"#fefefe\",\n  errorBackground: \"red\",\n  errorText: \"#fff\",\n  warningBackground: \"#EAEB5E\",\n  warningText: \"#666804\",\n  noticeBackground: tintColor,\n  noticeText: \"#fff\",\n  checkboxSelected: tintColor,\n  secondaryText: \"#aeaeae\",\n\n  // Buttons\n  navButtonText: palette[\"grey-800\"], // #22543D?\n  navButtonBackground: \"white\",\n\n  navButtonSelectedBackground: palette[\"grey-050\"], // palette[\"green-050\"],\n  navButtonSelectedText: palette[\"green-700\"],\n\n  // Badge\n  badgeBackground: tintColor, // palette[\"green-400\"],\n  badgeText: \"white\",\n\n  // Card\n  cardBackground: palette[\"grey-050\"], // \"#fafafa\"?\n  cardHighlightBackground: palette[\"yellow-050\"], // \"#fafafa\"?\n\n  // Icon\n  iconDefault: \"#ccc\",\n  iconSelected: tintColor,\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\n\nexport default function TabBarIcon(props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  );\n}\n","import * as React from \"react\";\nimport { View, ImageBackground, Text, TouchableOpacity } from \"react-native\";\n\nexport function ImageCard(props) {\n  return (\n    <View\n      style={[props.style, { borderColor: \"#cdcdcd\", paddingHorizontal: 5 }]}\n    >\n      <TouchableOpacity onPress={props.onPress} style={{ flex: 3 }}>\n        <ImageBackground\n          source={{ uri: props.imageUrl }}\n          imageStyle={{ borderRadius: 5, resizeMode: \"cover\" }}\n          style={{ flex: 1 }}\n        >\n          <View\n            style={{\n              flexDirection: \"row\",\n              flexDirection: \"row-reverse\",\n              width: 250,\n              height: 180,\n            }}\n          >\n            {props.children}\n          </View>\n        </ImageBackground>\n      </TouchableOpacity>\n      <View style={{ flex: 1, paddingTop: 10 }}>\n        <Text onPress={props.onPress}>{props.title}</Text>\n      </View>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { View, TouchableOpacity } from \"react-native\";\n\nexport function CheckIcon(props) {\n  return (\n    <TouchableOpacity\n      onPress={props.onPress}\n      style={{\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        backgroundColor: \"white\",\n        margin: 10,\n      }}\n    >\n      <Ionicons\n        name={\"ios-checkmark-circle\"}\n        size={38}\n        style={{ marginTop: -5 }}\n        color={Colors.iconSelected}\n      />\n    </TouchableOpacity>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport function PlusIcon(props) {\n  return (\n    <TouchableOpacity\n      onPress={props.onPress}\n      style={[\n        {\n          width: 30,\n          height: 30,\n          borderRadius: 15,\n          backgroundColor: \"white\",\n          margin: 10,\n        },\n        props.style,\n      ]}\n    >\n      <Ionicons\n        name={\"md-add-circle\"}\n        size={38}\n        style={{ marginTop: -5 }}\n        color={Colors.iconDefault}\n      />\n    </TouchableOpacity>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport function MinusIcon(props) {\n  return (\n    <TouchableOpacity\n      style={{\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        backgroundColor: \"white\",\n        margin: 10,\n      }}\n    >\n      <Ionicons\n        onPress={props.onPress}\n        name={\"md-remove-circle\"}\n        size={38}\n        style={{ marginTop: -5 }}\n        color={Colors.iconDefault}\n      />\n    </TouchableOpacity>\n  );\n}\n","import * as React from \"react\";\nimport { View, Text } from \"react-native\";\nimport Colors from \"../../constants/Colors\";\n\nexport function SectionHeader(props) {\n  return (\n    <View\n      style={[\n        props.style,\n        {\n          flex: 1,\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"baseline\",\n          marginHorizontal: 20,\n          borderTopColor: \"#ececec\",\n          borderTopWidth: 0.5,\n        },\n      ]}\n    >\n      <Text\n        style={{\n          fontSize: 24,\n          fontWeight: \"700\",\n          paddingTop: 20,\n          paddingBottom: 15,\n        }}\n      >\n        {props.title}\n      </Text>\n      {props.children}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { View, Image, Text } from \"react-native\";\n\nexport function ListItem(props) {\n  return (\n    <View\n      style={[\n        {\n          flex: 1,\n          marginBottom: 10,\n          flexDirection: \"row\",\n          backgroundColor: Colors.cardBackground,\n          paddingHorizontal: 10,\n          paddingVertical: 5,\n          borderRadius: 5,\n        },\n        props.style,\n      ]}\n    >\n      <View style={{ justifyContent: \"center\" }}>\n        <Image\n          source={{ uri: props.imageUrl }}\n          fadeDuration={0.2}\n          resizeMode=\"contain\"\n          style={{ width: 35, height: 35 }}\n        />\n      </View>\n      <View\n        style={{\n          flex: 1,\n          marginLeft: 10,\n          alignSelf: \"stretch\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Text>{props.title}</Text>\n      </View>\n      {props.children}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { Text, TouchableOpacity } from \"react-native\";\n\nexport function Badge(props) {\n  return (\n    <TouchableOpacity\n      onPress={props.onPress}\n      style={{\n        alignSelf: \"center\",\n        backgroundColor: Colors.tintColor,\n        borderRadius: 15,\n        width: 30,\n        height: 30,\n        margin: 10,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <Text\n        style={{\n          paddingHorizontal: 4,\n          fontWeight: \"700\",\n          fontSize: 15,\n          color: \"white\",\n        }}\n      >\n        {props.amount}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n","import * as React from \"react\";\nimport Colors from \"../../constants/Colors\";\nimport { Badge } from \"../Badge/Badge\";\nimport gql from \"graphql-tag\";\nimport { PlusIcon, MinusIcon } from \"../Icon\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { withState, compose, withHandlers, lifecycle } from \"recompose\";\nimport { View, Text } from \"react-native\";\n\nconst enhance = compose(\n  withState(\"opened\", \"toggle\", false),\n  withHandlers(({ toggle }) => {\n    let timeout = null;\n\n    return {\n      clearTimeout: () => () => clearTimeout(timeout),\n      resetCloseTimout: ({ opened }) => () => {\n        clearTimeout(timeout);\n        if (opened) {\n          timeout = setTimeout(() => toggle(() => false), 3000);\n        }\n      },\n    };\n  }),\n  lifecycle({\n    componentWillUnmount() {\n      this.props.clearTimeout();\n    },\n  })\n);\n\nconst ORDER_INGREDIENT = gql`\n  mutation orderIngredient($ingredientId: ID!, $quantity: Int!) {\n    orderIngredient(ingredientId: $ingredientId, quantity: $quantity) {\n      id\n      orderedQuantity\n    }\n  }\n`;\n\nexport const QuantitySelector = enhance(\n  ({ id, orderedQuantity, opened, toggle, resetCloseTimout }) => {\n    const [orderIngredient] = useMutation(ORDER_INGREDIENT, {\n      refetchQueries: [\"OrderList\"],\n      onCompleted: ({ orderIngredient }) => {\n        if (orderIngredient.orderedQuantity === 0) {\n          toggle(() => false);\n        }\n      },\n    });\n\n    if (orderedQuantity === 0) {\n      return (\n        <PlusIcon\n          onPress={(e) => {\n            e.preventDefault();\n            orderIngredient({ variables: { ingredientId: id, quantity: 1 } });\n          }}\n        />\n      );\n    }\n\n    if (opened) {\n      resetCloseTimout();\n\n      return (\n        <View\n          style={{\n            flex: 1,\n            flexDirection: \"row\",\n            alignContent: \"flex-end\",\n            marginRight: -10,\n          }}\n        >\n          <MinusIcon\n            onPress={(e) => {\n              e.preventDefault();\n              orderIngredient({\n                variables: { ingredientId: id, quantity: orderedQuantity - 1 },\n              });\n            }}\n          />\n\n          <View style={{ justifyContent: \"center\" }}>\n            <Text>{orderedQuantity}</Text>\n          </View>\n\n          <PlusIcon\n            onPress={(e) => {\n              e.preventDefault();\n              orderIngredient({\n                variables: { ingredientId: id, quantity: orderedQuantity + 1 },\n              });\n            }}\n          />\n        </View>\n      );\n    }\n\n    return (\n      <Badge\n        amount={orderedQuantity}\n        onPress={(e) => {\n          e.preventDefault();\n          toggle((opened) => !opened);\n        }}\n      />\n    );\n  }\n);\n","import * as React from \"react\";\nimport { StyleSheet, Text, View, FlatList } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Colors from \"../constants/Colors\";\nimport { ImageCard } from \"../components/Card/ImageCard\";\nimport { PlusIcon, CheckIcon } from \"../components/Icon\";\nimport { SectionHeader } from \"../components/Section/SectionHeader\";\nimport { ListItem } from \"../components/ListItem/ListItem\";\nimport { QuantitySelector } from \"../components/Ingredient/QuantitySelector\";\nimport SkeletonContent from \"react-native-skeleton-content\";\n\nconst PLAN_RECIPE = gql`\n  mutation PlanRecipe($recipeId: ID!) {\n    planRecipe(recipeId: $recipeId) {\n      id\n      isPlanned\n    }\n  }\n`;\nconst UNPLAN_RECIPE = gql`\n  mutation UnplanRecipe($recipeId: ID!) {\n    unplanRecipe(recipeId: $recipeId) {\n      id\n      isPlanned\n    }\n  }\n`;\nconst GET_RECIPES = gql`\n  query RecipeList {\n    recipes {\n      id\n      title\n      imageUrl\n      isPlanned\n    }\n  }\n`;\nconst GET_BASICS = gql`\n  query BasicsList {\n    basics: ingredients(\n      first: 1000\n      filter: { essential: true }\n      order: [{ field: NAME, direction: ASC }]\n    ) {\n      edges {\n        ingredient: node {\n          id\n          name\n          imageUrl\n          isPlanned\n          orderedQuantity\n          plannedRecipes {\n            quantity\n            recipe {\n              id\n              title\n            }\n          }\n          season {\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction RecipeList({ navigation }) {\n  const { loading, error, data = {} } = useQuery(GET_RECIPES);\n  const [planRecipe] = useMutation(PLAN_RECIPE, {\n    refetchQueries: [\"BasicsList\"],\n  });\n  const [unplanRecipe] = useMutation(UNPLAN_RECIPE, {\n    refetchQueries: [\"BasicsList\"],\n  });\n\n  if (error) return `Error! ${error}`;\n\n  const { recipes = [] } = data;\n  return (\n    <View>\n      <SectionHeader title=\"Recepten\">\n        <Text\n          style={{\n            color: Colors.secondaryText,\n            fontSize: 14,\n            paddingBottom: 2,\n          }}\n        >\n          Bekijk alles\n        </Text>\n      </SectionHeader>\n\n      <SkeletonContent\n        layout={[\n          {\n            width: 250,\n            height: 140,\n            margin: 20,\n            marginTop: 0,\n            marginBottom: 10,\n          },\n          // short line\n          { width: 180, height: 25, marginLeft: 20, marginBottom: 32 },\n        ]}\n        containerStyle={{ flex: 1 }}\n        isLoading={loading}\n      >\n        <View style={{ paddingLeft: 15 }}>\n          <ScrollView horizontal={true}>\n            {recipes.map((recipe) => (\n              <ImageCard\n                onPress={(e) => {\n                  e.preventDefault();\n                  navigation.navigate(\"RecipeDetail\", {\n                    id: recipe.id,\n                    recipe,\n                  });\n                }}\n                key={recipe.id}\n                title={recipe.title}\n                imageUrl={recipe.imageUrl}\n              >\n                {recipe.isPlanned ? (\n                  <PlusIcon\n                    onPress={(e) => {\n                      e.preventDefault();\n                      unplanRecipe({ variables: { recipeId: recipe.id } });\n                    }}\n                  />\n                ) : (\n                  <CheckIcon\n                    onPress={(e) => {\n                      e.preventDefault();\n                      planRecipe({ variables: { recipeId: recipe.id } });\n                    }}\n                  />\n                )}\n              </ImageCard>\n            ))}\n          </ScrollView>\n        </View>\n      </SkeletonContent>\n    </View>\n  );\n}\n\nfunction BasicsList() {\n  const { loading, error, data = {} } = useQuery(GET_BASICS);\n\n  if (error) return `Error! ${error}`;\n\n  const { basics: { edges = [] } = {} } = data;\n  return (\n    <View>\n      <SectionHeader title=\"Basics\" />\n      <SkeletonContent\n        layout={Array(5).fill({\n          width: \"auto\",\n          height: 60,\n          marginHorizontal: 20,\n          marginBottom: 10,\n        })}\n        containerStyle={{ flex: 1 }}\n        isLoading={loading}\n      >\n        <FlatList\n          style={{ paddingHorizontal: 20 }}\n          data={edges}\n          keyExtractor={({ ingredient }) => ingredient.id}\n          renderItem={({ item: { ingredient } }) => {\n            return (\n              <ListItem\n                style={{\n                  backgroundColor: ingredient.isPlanned\n                    ? Colors.cardHighlightBackground\n                    : Colors.cardBackground,\n                }}\n                title={ingredient.name}\n                imageUrl={ingredient.imageUrl}\n              >\n                <QuantitySelector\n                  id={ingredient.id}\n                  orderedQuantity={ingredient.orderedQuantity}\n                />\n              </ListItem>\n            );\n          }}\n        />\n      </SkeletonContent>\n    </View>\n  );\n}\n\nexport default function PlanScreen({ navigation }) {\n  return (\n    <ScrollView\n      style={{ flex: 1, backgroundColor: \"white\" }}\n      contentContainerStyle={{ paddingTop: 30 }}\n    >\n      {/* <View style={{ flex: 1, flexDirection: \"row\", marginHorizontal: 20 }}>\n          <View\n            style={{\n              flexDirection: \"row\",\n              backgroundColor: Colors.navButtonSelectedBackground,\n              padding: 5,\n              paddingHorizontal: 10,\n              borderRadius: 5,\n            }}\n          >\n            <Text\n              style={{\n                alignSelf: \"center\",\n                color: Colors.navButtonSelectedText,\n              }}\n            >\n              Recepten\n            </Text>\n            <View\n              style={{\n                alignSelf: \"center\",\n                backgroundColor: Colors.badgeBackground,\n                borderRadius: 10,\n                width: 20,\n                height: 20,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                marginLeft: 10,\n              }}\n            >\n              <Text\n                style={{\n                  paddingHorizontal: 4,\n                  fontSize: 12,\n                  fontWeight: \"700\",\n                  color: Colors.badgeText,\n                }}\n              >\n                2\n              </Text>\n            </View>\n          </View>\n\n          <View\n            style={{\n              flexDirection: \"row\",\n              padding: 5,\n              paddingHorizontal: 10,\n              borderRadius: 5,\n              backgroundColor: Colors.navButtonBackground,\n            }}\n          >\n            <Text style={{ alignSelf: \"center\", color: Colors.navButtonText }}>\n              Basics\n            </Text>\n          </View>\n        </View>\n        */}\n\n      <RecipeList navigation={navigation} />\n      <BasicsList />\n    </ScrollView>\n  );\n}\n\nPlanScreen.navigationOptions = {\n  header: null,\n};\n","import * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Text, View, FlatList } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { SectionHeader } from \"../components/Section/SectionHeader\";\nimport { ListItem } from \"../components/ListItem/ListItem\";\nimport { QuantitySelector } from \"../components/Ingredient/QuantitySelector\";\nimport SkeletonContent from \"react-native-skeleton-content\";\n\nconst GET_ORDER = gql`\n  query OrderList($inShoppingList: Boolean!) {\n    currentOrder {\n      id\n      totalCount\n      totalPrice\n      items {\n        id\n        ingredient {\n          id\n          name\n          imageUrl\n          isPlanned(inShoppingList: $inShoppingList)\n          orderedQuantity(inShoppingList: $inShoppingList)\n          plannedRecipes(inShoppingList: $inShoppingList) {\n            quantity\n            recipe {\n              id\n              title\n            }\n          }\n          season {\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ShopScreen() {\n  const { loading, error, data = {} } = useQuery(GET_ORDER, {\n    variables: { inShoppingList: false },\n  });\n  if (error) return `Error! ${error}`;\n\n  const { currentOrder = {} } = data;\n\n  return (\n    <ScrollView\n      style={{ flex: 1, backgroundColor: \"white\" }}\n      contentContainerStyle={{ paddingTop: 30 }}\n    >\n      <SectionHeader title=\"Lijst\" />\n\n      <SkeletonContent\n        layout={Array(5).fill({\n          width: \"auto\",\n          height: 60,\n\n          marginHorizontal: 20,\n          marginBottom: 10,\n        })}\n        containerStyle={{}}\n        isLoading={loading}\n      >\n        <FlatList\n          style={{ paddingHorizontal: 20 }}\n          data={currentOrder.items}\n          keyExtractor={(item) => item.id}\n          renderItem={({ item: { ingredient } }) => {\n            return (\n              <ListItem title={ingredient.name} imageUrl={ingredient.imageUrl}>\n                <QuantitySelector\n                  id={ingredient.id}\n                  orderedQuantity={ingredient.orderedQuantity}\n                />\n              </ListItem>\n            );\n          }}\n        />\n      </SkeletonContent>\n    </ScrollView>\n  );\n}\n","import * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Text, View, FlatList } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { SectionHeader } from \"../components/Section/SectionHeader\";\nimport { ImageCard } from \"../components/Card/ImageCard\";\nimport SkeletonContent from \"react-native-skeleton-content\";\n\nconst GET_LAST_RECIPES = gql`\n  query LastOrderedRecipes {\n    recipes: lastOrderedRecipes {\n      id\n      title\n      imageUrl\n    }\n  }\n`;\n\nexport default function CookScreen() {\n  const { loading, error, data = {} } = useQuery(GET_LAST_RECIPES, {\n    variables: { inShoppingList: false },\n  });\n  if (error) return `Error! ${error}`;\n\n  const { recipes = [] } = data;\n\n  return (\n    <ScrollView\n      style={{ flex: 1, backgroundColor: \"white\" }}\n      contentContainerStyle={{ paddingTop: 30 }}\n    >\n      <SectionHeader title=\"Recepten\" />\n\n      <SkeletonContent\n        layout={Array(3).fill({\n          width: 50,\n          height: 60,\n          margin: 5,\n          marginBottom: 10,\n          flexBasis: \"50%\",\n        })}\n        containerStyle={{\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          alignContent: \"stretch\",\n          paddingHorizontal: 15,\n        }}\n        isLoading={loading}\n      >\n        {recipes.map((recipe) => (\n          <ImageCard\n            key={recipe.id}\n            style={{ flexBasis: \"50%\" }}\n            title={recipe.title}\n            imageUrl={recipe.imageUrl}\n          ></ImageCard>\n        ))}\n      </SkeletonContent>\n    </ScrollView>\n  );\n}\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport * as React from \"react\";\n\nimport Colors from \"../constants/Colors\";\nimport TabBarIcon from \"../components/TabBarIcon\";\nimport PlanScreen from \"../screens/PlanScreen\";\nimport ShopScreen from \"../screens/ShopScreen\";\nimport CookScreen from \"../screens/CookScreen\";\n\nconst BottomTab = createBottomTabNavigator();\nconst INITIAL_ROUTE_NAME = \"plan\";\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({\n    header: () => null, // hide header title\n  });\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName={INITIAL_ROUTE_NAME}\n      tabBarOptions={{\n        activeTintColor: Colors.tintColor,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"plan\"\n        component={PlanScreen}\n        options={{\n          title: \"Plannen\",\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} name=\"ios-calendar\" />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"shop\"\n        component={ShopScreen}\n        options={{\n          title: \"Winkelen\",\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} name=\"ios-cart\" />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"cook\"\n        component={CookScreen}\n        options={{\n          title: \"Koken\",\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} name=\"ios-restaurant\" />\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text, View, ImageBackground } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Colors from \"../constants/Colors\";\nimport { ImageCard } from \"../components/Card/ImageCard\";\nimport { PlusIcon, CheckIcon } from \"../components/Icon\";\nimport { SectionHeader } from \"../components/Section/SectionHeader\";\nimport { ListItem } from \"../components/ListItem/ListItem\";\nimport { QuantitySelector } from \"../components/Ingredient/QuantitySelector\";\n\nconst GET_RECIPE = gql`\n  query GetRecipe($recipeId: ID!) {\n    recipe: node(id: $recipeId) {\n      ... on Recipe {\n        id\n        title\n        description\n        imageUrl\n        ingredients {\n          quantity\n          ingredient {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RecipeDetailScreen({ route: { params }, navigation }) {\n  const { loading, error, data } = useQuery(GET_RECIPE, {\n    variables: { recipeId: params.id },\n    returnPartialData: true,\n  });\n  if (error) return `Error! ${error}`;\n  if (loading)\n    return (\n      <View>\n        <Text>Loading</Text>\n      </View>\n    );\n  const { recipe } = data;\n  navigation.setOptions({ title: recipe.title });\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <ImageBackground\n          source={{ uri: recipe.imageUrl }}\n          imageStyle={{ resizeMode: \"cover\" }}\n          fadeDuration={0.2}\n          style={{ flex: 1 }}\n        >\n          <View\n            style={{\n              flexDirection: \"row\",\n              flexDirection: \"row-reverse\",\n              width: 250,\n              height: 180,\n            }}\n          ></View>\n        </ImageBackground>\n      </ScrollView>\n    </View>\n  );\n}\n\nRecipeDetailScreen.navigationOptions = {\n  header: null,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n});\n","import * as React from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport { SplashScreen } from \"expo\";\nimport * as Font from \"expo-font\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport * as AbsintheSocket from \"@absinthe/socket\";\nimport { createAbsintheSocketLink } from \"@absinthe/socket-apollo-link\";\nimport { Socket as PhoenixSocket } from \"phoenix\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport RecipeDetailScreen from \"./screens/RecipeDetailScreen\";\nimport useLinking from \"./navigation/useLinking\";\n\nconst onErrorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst Stack = createStackNavigator();\nconst host = \"wss://picape.whybug.com/socket\";\n// const host = \"ws://localhost:4000/socket\";\nconst link = ApolloLink.from([\n  onErrorLink,\n  createAbsintheSocketLink(AbsintheSocket.create(new PhoenixSocket(host))),\n]);\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n});\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          \"space-mono\": require(\"./assets/fonts/SpaceMono-Regular.ttf\"),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer\n          ref={containerRef}\n          initialState={initialNavigationState}\n        >\n          <ApolloProvider client={client}>\n            <Stack.Navigator>\n              <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n              <Stack.Screen\n                name=\"RecipeDetail\"\n                component={RecipeDetailScreen}\n              />\n            </Stack.Navigator>\n          </ApolloProvider>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n});\n","import { useLinking } from \"@react-navigation/native\";\nimport { Linking } from \"expo\";\n\nexport default function (containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl(\"/\")],\n    config: {\n      Root: {\n        path: \"\",\n        screens: {\n          plan: \"plan\",\n          shop: \"shop\",\n          cook: \"cook\",\n        },\n      },\n      RecipeDetail: {\n        path: \"recipe/:id\",\n        parse: {\n          id: (id) => decodeURIComponent(id),\n        },\n      },\n    },\n  });\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}